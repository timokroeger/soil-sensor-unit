/*
******************************************************************************
File:     startup_LPC82x.s
Info:     Generated by Atollic TrueSTUDIO(R) 7.1.0   2017-03-06

The MIT License (MIT)
Copyright (c) 2009-2017 Atollic AB

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/**
**===========================================================================
**  Revisions
**===========================================================================
**       Date        Modification
**       2014-11-14  First issue.
**===========================================================================
*/

/**
**===========================================================================
**  Definitions
**===========================================================================
*/
    .syntax unified
    .cpu cortex-m0
    .fpu softvfp
    .thumb

.global g_pfnVectors
.global Default_Handler

/* Linker script definitions */
/* start address for the initialization values of the .data section */
.word   _sidata
/* start address for the .data section */
.word   _sdata
/* end address for the .data section */
.word   _edata
/* start address for the .bss section */
.word   _sbss
/* end address for the .bss section */
.word   _ebss

/**
**===========================================================================
**  Program - Reset_Handler
**  Abstract: This code gets called after a reset event.
**    1. Copy .data section from ROM to RAM
**    2. Clear .bss section (Zero init)
**    3. Call system initialzation routine
**    4. Run static constructors
**    5. Enter main
**    6. Loop forever if returning from main
**===========================================================================
*/
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
  mov   sp, r0          /* set stack pointer */

  /* 1. copy .data section (Copy from ROM to RAM) */
  movs  r1, #0
  b     LoopCopyDataInit

CopyDataInit:
  ldr   r3, =_sidata
  ldr   r3, [r3, r1]
  str   r3, [r0, r1]
  adds  r1, r1, #4

LoopCopyDataInit:
  ldr   r0, =_sdata
  ldr   r3, =_edata
  adds  r2, r0, r1
  cmp   r2, r3
  bcc   CopyDataInit
  ldr   r2, =_sbss
  b     LoopFillZerobss

  /* 2. Clear .bss section (Zero init) */
FillZerobss:
  movs  r3, #0
  str   r3, [r2]
  adds  r2, r2, #4

LoopFillZerobss:
  ldr   r3, = _ebss
  cmp   r2, r3
  bcc   FillZerobss

  /* 3. Call system initialzation routine */
  bl    SystemInit

  /* 4. Run static constructors  */
  bl    __libc_init_array

  /* 5. Enter main  */
  bl    main

  /* 6. Loop forever if returning from main */
LoopForever:
  b     LoopForever


.size   Reset_Handler, .-Reset_Handler

/**
**===========================================================================
**  Program - Default_Handler
**  Abstract: This code gets called when the processor receives an
**    unexpected interrupt.
**===========================================================================
*/
  .section      .text.Default_Handler,"ax",%progbits
Default_Handler:
InfiniteLoop:
  b     InfiniteLoop
  .size Default_Handler, .-Default_Handler

/**
**===========================================================================
**  Reset, Exception, and Interrupt vectors
**===========================================================================
*/
  .section .isr_vector,"a",%progbits
  .type g_pfnVectors, %object
  .size g_pfnVectors, .-g_pfnVectors


g_pfnVectors:
  /* Processor exception vectors */
  .word	_estack                      /* 0: Stack pointer                 */
  .word	Reset_Handler                /* 1: Reset                         */
  .word	NMI_Handler                  /* 2: NMI                           */
  .word	HardFault_Handler            /* 3: HardFault                     */
  .word	0                            /* 4: Reserved                      */
  .word	0                            /* 5: Reserved                      */
  .word	0                            /* 6: Reserved                      */
  .word	0                            /* 7: Reserved                      */
  .word	0                            /* 8: Reserved                      */
  .word	0                            /* 9: Reserved                      */
  .word	0                            /* 10: Reserved                     */
  .word	SVC_Handler                  /* 11: SVC                          */
  .word	0                            /* 12: Reserved                     */
  .word	0                            /* 13: Reserved                     */
  .word	PendSV_Handler               /* 14: PendSV                       */
  .word	SysTick_Handler              /* 15: SysTick                      */

  /* Interrupt Handlers for NXP LPC82x Peripherals */
  .word SPI0_IRQHandler              /*  0 - SPI0 controller             */
  .word SPI1_IRQHandler              /*  1 - SPI1 controller             */
  .word 0                            /*  2 - Reserved                    */                       
  .word UART0_IRQHandler             /*  3 - UART0                       */             
  .word UART1_IRQHandler             /*  4 - UART1                       */
  .word UART2_IRQHandler             /*  5 - UART2                       */
  .word 0                            /*  6 - Reserved                    */
  .word I2C1_IRQHandler              /*  7 - I2C1 controller             */
  .word I2C0_IRQHandler              /*  8 - I2C0 controller             */
  .word SCT_IRQHandler               /*  9 - Smart Counter Timer         */
  .word MRT_IRQHandler               /*  10 - Multi-Rate Timer           */
  .word CMP_IRQHandler               /*  11 - Comparator                 */
  .word WDT_IRQHandler               /*  12 - Watchdog                   */
  .word BOD_IRQHandler               /*  13 - Brown Out Detect           */
  .word FLASH_IRQHandler             /*  14 - Flash Interrupt            */
  .word WKT_IRQHandler               /*  15 - Wakeup timer               */
  .word ADC_SEQA_IRQHandler          /*  16 - ADC sequence A completion  */
  .word ADC_SEQB_IRQHandler          /*  17 - ADC sequence B completion  */
  .word ADC_THCMP_IRQHandler         /*  18 - ADC threshold compare      */
  .word ADC_OVR_IRQHandler           /*  19 - ADC overrun                */
  .word DMA_IRQHandler               /*  20 - DMA                        */
  .word I2C2_IRQHandler              /*  21 - I2C2 controller            */
  .word I2C3_IRQHandler              /*  22 - I2C3 controller            */
  .word 0                            /*  23 - Reserved                   */
  .word PIN_INT0_IRQHandler          /*  24 - PIO INT0                   */
  .word PIN_INT1_IRQHandler          /*  25 - PIO INT1                   */
  .word PIN_INT2_IRQHandler          /*  26 - PIO INT2                   */
  .word PIN_INT3_IRQHandler          /*  27 - PIO INT3                   */
  .word PIN_INT4_IRQHandler          /*  28 - PIO INT4                   */
  .word PIN_INT5_IRQHandler          /*  29 - PIO INT5                   */
  .word PIN_INT6_IRQHandler          /*  30 - PIO INT6                   */
  .word PIN_INT7_IRQHandler          /*  31 - PIO INT7                   */


/**
**===========================================================================
** Provide weak aliases for each Exception handler to the Default_Handler.
**===========================================================================
*/
  .weak  NMI_Handler
  .thumb_set NMI_Handler,Default_Handler
 
  .weak  HardFault_Handler
  .thumb_set HardFault_Handler,Default_Handler
  
  .weak  SVC_Handler
  .thumb_set SVC_Handler,Default_Handler

  .weak  PendSV_Handler
  .thumb_set PendSV_Handler,Default_Handler

  .weak  SysTick_Handler
  .thumb_set SysTick_Handler,Default_Handler

  .weak  SPI0_IRQHandler  
  .thumb_set SPI0_IRQHandler,Default_Handler
 
  .weak  SPI1_IRQHandler  
  .thumb_set SPI1_IRQHandler,Default_Handler
 
  .weak  UART0_IRQHandler             
  .thumb_set UART0_IRQHandler,Default_Handler
 
  .weak  UART1_IRQHandler 
  .thumb_set UART1_IRQHandler,Default_Handler
 
  .weak  UART2_IRQHandler 
  .thumb_set UART2_IRQHandler,Default_Handler
 
  .weak  I2C1_IRQHandler
  .thumb_set I2C1_IRQHandler,Default_Handler

  .weak  I2C0_IRQHandler
  .thumb_set I2C0_IRQHandler,Default_Handler

  .weak  SCT_IRQHandler
  .thumb_set SCT_IRQHandler,Default_Handler

  .weak  MRT_IRQHandler
  .thumb_set MRT_IRQHandler,Default_Handler

  .weak  CMP_IRQHandler
  .thumb_set CMP_IRQHandler,Default_Handler

  .weak  WDT_IRQHandler
  .thumb_set WDT_IRQHandler,Default_Handler

  .weak  BOD_IRQHandler
  .thumb_set BOD_IRQHandler,Default_Handler

  .weak  FLASH_IRQHandler
  .thumb_set FLASH_IRQHandler,Default_Handler

  .weak  WKT_IRQHandler
  .thumb_set WKT_IRQHandler,Default_Handler

  .weak  ADC_SEQA_IRQHandler
  .thumb_set ADC_SEQA_IRQHandler,Default_Handler

  .weak  ADC_SEQB_IRQHandler
  .thumb_set ADC_SEQB_IRQHandler,Default_Handler

  .weak  ADC_THCMP_IRQHandler
  .thumb_set ADC_THCMP_IRQHandler,Default_Handler

  .weak  ADC_OVR_IRQHandler
  .thumb_set ADC_OVR_IRQHandler,Default_Handler

  .weak  DMA_IRQHandler
  .thumb_set DMA_IRQHandler,Default_Handler

  .weak  I2C2_IRQHandler
  .thumb_set I2C2_IRQHandler,Default_Handler

  .weak  I2C3_IRQHandler
  .thumb_set I2C3_IRQHandler,Default_Handler

  .weak  PIN_INT0_IRQHandler
  .thumb_set PIN_INT0_IRQHandler,Default_Handler
 
  .weak  PIN_INT1_IRQHandler
  .thumb_set PIN_INT1_IRQHandler,Default_Handler
 
  .weak  PIN_INT2_IRQHandler
  .thumb_set PIN_INT2_IRQHandler,Default_Handler
 
  .weak  PIN_INT3_IRQHandler
  .thumb_set PIN_INT3_IRQHandler,Default_Handler
 
  .weak  PIN_INT4_IRQHandler
  .thumb_set PIN_INT4_IRQHandler,Default_Handler
 
  .weak  PIN_INT5_IRQHandler
  .thumb_set PIN_INT5_IRQHandler,Default_Handler
 
  .weak  PIN_INT6_IRQHandler
  .thumb_set PIN_INT6_IRQHandler,Default_Handler
 
  .weak  PIN_INT7_IRQHandler
  .thumb_set PIN_INT7_IRQHandler,Default_Handler
 
.end
